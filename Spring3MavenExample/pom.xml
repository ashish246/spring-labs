<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>Spring3MavenExample</groupId>
	<artifactId>Spring3MavenExample</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Spring3MavenExample</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<jdk.version>1.7</jdk.version>
		<src.dir>src</src.dir>
		<junit.version>4.11</junit.version>
		<org.springframework.version>3.2.4.RELEASE</org.springframework.version>
		<org.springframework.security.version>5.5.7</org.springframework.security.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- This dependency – spring-context – defines the actual Spring Injection 
			Container and has a small number of dependencies: spring-core, spring-expression, 
			spring-aop and spring-beans. These augment the container by enabling support 
			for some of the core Spring technologies: the Core Spring utilities, the 
			Spring Expression Language (SpEL), the Aspect Oriented Programming support 
			and the JavaBeans mechanism. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- This brings in Hibernate and JPA support – such as HibernateTemplate 
			and JpaTemplate – as well as the a few additional, persistence related dependencies: 
			spring-jdbc and spring-tx. The JDBC Data Access library defines the Spring 
			JDBC support as well as the JdbcTemplate, and spring-tx represents the extremely 
			flexible Transaction Management Abstraction in Spring. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- The spring-web dependency contains common web specific utilities for 
			both Servlet and Portlet environments, while spring-webmvc enables the MVC 
			support for Servlet environments. Since spring-webmvc has spring-web as a 
			dependency, explicitly defining spring-web is not required when using spring-webmvc. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- As of Spring 3.2, the Spring MVC Test project, which started as a 
			standalone project available on github, has been included into the core Test 
			Framework; this means that Spring 3.2 applications should simply use the 
			spring-test dependency. For applications still using Spring 3.1 and below, 
			the older standalone Maven dependency still exists and can be used for almost 
			identical results. The dependency is not on Maven Central however, so using 
			it will require adding a custom repository to the pom of the project. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- The Core Spring Security support – spring-security-core – contains 
			authentication and access control functionality, and has support for standalone 
			(non-web) applications, method level security and JDBC. Spring and Spring 
			Security are on different release schedules, so there isn’t a 1:1 match between 
			the version numbers. -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${org.springframework.security.version}</version>
		</dependency>

		<!-- To add Web support for Spring Security, the spring-security-web dependency 
			is required. This contains filters and related web security infrastructure 
			enabling URL access control in a Servlet environment. -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${org.springframework.security.version}</version>
		</dependency>

		<!-- To use the rich Spring Security XML namespace, the spring-security-config 
			dependency will be required. No application code should compile against this 
			dependency, so it should be scoped as runtime. Finally, LDAP, ACL, CAS and 
			OpenID support have their own dependencies in Spring Security: spring-security-ldap, 
			spring-security-acl, spring-security-cas and spring-security-openid. -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${org.springframework.security.version}</version>
			<scope>runtime</scope>
		</dependency>

	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
