<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Configuring RoleVoter bean to use custom access roles, by default roles 
		should be in the form ROLE_{XXX} -->
	<beans:bean id="roleVoter"
		class="org.springframework.security.access.vote.RoleVoter">
		<beans:property name="rolePrefix" value=""></beans:property>
	</beans:bean>

	<!-- accessDecisionManager bean is defined so that we can have our custom 
		roles, by default all the roles should start with ROLE_ and we are overriding 
		this setting in the roleVoter bean property rolePrefix. -->

	<beans:bean id="accessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<beans:constructor-arg name="decisionVoters"
			ref="roleVoter" />
	</beans:bean>

	<!-- http authentication-manager-ref is used to define the authentication 
		manager that will be used for authenticating the user. Currently it’s configured 
		to use the JDBC based authentication. http access-decision-manager-ref is 
		used to specifying the ID of the AccessDecisionManager implementation which 
		should be used for authorizing HTTP requests. intercept-url is used to define 
		the URL pattern and authorities of the user who can access this page. For 
		example, we have defined that URI “/emp/**” can be accessible only by users 
		having “Admin” access. form-login defines the login form configuration and 
		we can provide the username and password parameter names. authentication-failure-url 
		is used to define the URL for the authentication failure page. If no login 
		failure URL is specified, Spring Security will automatically create a failure 
		login URL at /spring_security_login?login_error and a corresponding filter 
		to render that login failure URL when requested. default-target-url is used 
		to define the default URL that will be redirected to after successful authentication, 
		if the user’s previous action could not be resumed. This generally happens 
		if the user visits a login page without having first requested a secured 
		operation that triggers authentication. If unspecified, it defaults to the 
		root of the application. logout is used to define the logout processing filter. 
		Here we are invalidating the session and sending the user to login page after 
		successful logout. logout-url is used to define the URL to be used for logout 
		action. access-denied-handler defines the global error page if the user is 
		denied the access, because he is not authorized to perform the specified 
		action. session-management will add a SessionManagementFilter filter to the 
		filter stack for Session Management. -->

	<http authentication-manager-ref="jdbc-auth"
		access-decision-manager-ref="accessDecisionManager">
		
		<intercept-url pattern="/emp/**" access="Admin" />
		<form-login login-page="/login" authentication-failure-url="/denied"
			username-parameter="username" password-parameter="password"
			default-target-url="/home" />
		<logout invalidate-session="true" logout-success-url="/login"
			logout-url="/j_spring_security_logout" />
		<access-denied-handler error-page="/denied" />
		<session-management invalid-session-url="/login">
			<concurrency-control max-sessions="1"
				expired-url="/login" />
		</session-management>
	</http>

	<authentication-manager id="in-memory-auth">
		<authentication-provider>
			<user-service>
				<user name="ashish" password="ashish123" authorities="Admin" />
			</user-service>
		</authentication-provider>
	</authentication-manager>

	<authentication-manager id="dao-auth">
		<authentication-provider user-service-ref="userDetailsService">
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="userDetailsService" class="com.spring.mvc.dao.AppUserDetailsServiceDAO" />

	<authentication-manager id="jdbc-auth">
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select username,password,enabled from Employees where username = ?"
				authorities-by-username-query="select username,role from Roles where username = ?" />
		</authentication-provider>
	</authentication-manager>

	<!-- MySQL DB DataSource -->
	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url" value="jdbc:mysql://localhost:3306/test" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="1729" />
	</beans:bean>

	<!-- If DataSource is configured in Tomcat Servlet Container -->
	<beans:bean id="dbDataSource"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/test_local" />
	</beans:bean>


</beans:beans>