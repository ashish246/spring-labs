<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- messageSource bean is configured to enable i18n for our application. 
		basename property is used to provide the location of resource bundles. classpath:messages 
		means that resource bundles are located in the classpath and follows name 
		pattern as messages_{locale}.properties. defaultEncoding property is used 
		to define the encoding used for the messages. -->
	<beans:bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basename" value="classpath:message" />
		<beans:property name="defaultEncoding" value="UTF-8" />
	</beans:bean>

	<!-- localeResolver bean of type org.springframework.web.servlet.i18n.CookieLocaleResolver 
		is used to set a cookie in the client request so that further requests can 
		easily recognize the user locale. For example, we can ask user to select 
		the locale when he launches the web application for the first time and with 
		the use of cookie, we can identify the user locale and automatically send 
		locale specific response. We can also specify the default locale, cookie 
		name and maximum age of the cookie before it gets expired and deleted by 
		the client browser. If your application maintains user sessions, then you 
		can also use org.springframework.web.servlet.i18n.SessionLocaleResolver as 
		localeResolver to use a locale attribute in the user’s session. The configuration 
		is similar to CookieLocaleResolver. -->
	<beans:bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<beans:property name="defaultLocale" value="en" />
		<beans:property name="cookieName" value="myAppLocaleCookie"></beans:property>
		<beans:property name="cookieMaxAge" value="3600"></beans:property>
	</beans:bean>

	<!-- org.springframework.web.servlet.i18n.LocaleChangeInterceptor interceptor 
		is configured to intercept the user request and identify the user locale. 
		The parameter name is configurable and we are using request parameter name 
		for locale as “locale”. Without this interceptor, we won’t be able to change 
		the user locale and send the response based on the new locale settings of 
		the user. It needs to be part of interceptors element otherwise Spring won’t 
		configure it as an interceptor. -->
	<interceptors>
		<beans:bean
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<beans:property name="paramName" value="locale" />
		</beans:bean>
	</interceptors>

	<context:component-scan base-package="com.spring.i18n" />

</beans:beans>
